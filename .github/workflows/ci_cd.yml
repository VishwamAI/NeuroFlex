---
name: NeuroFlex CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Create necessary directories
        run: |
          mkdir -p ${{ github.workspace }}/data
          mkdir -p ${{ github.workspace }}/path/to/save
      - name: Run tests
        run: |
          pytest tests/ --disable-warnings
        env:
          NEUROFLEX_DATA_DIR: ${{ github.workspace }}/data
          NEUROFLEX_SAVE_DIR: ${{ github.workspace }}/path/to/save
      - name: Debug file-related issues
        if: failure()
        run: |
          echo "Debugging file-related issues"
          find ${{ github.workspace }} -name "*.nc" -type f
          ls -R ${{ github.workspace }}/data
          ls -R ${{ github.workspace }}/path/to/save
          cat ${{ github.workspace }}/path/to/save/merged_bio_data.nc || echo "File not found"
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build package
        run: |
          pip install build
          python -m build
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build and publish
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install build twine
          python -m build
          python -m twine upload --repository pypi -u __token__ -p $PYPI_API_TOKEN dist/*
