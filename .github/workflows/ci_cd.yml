name: NeuroFlex CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python 3.8
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Cache pip dependencies
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Create necessary directories for data and save paths
      - name: Create necessary directories
        run: |
          mkdir -p ${{ github.workspace }}/data
          mkdir -p ${{ github.workspace }}/path/to/save

      # Set environment variables
      - name: Set ALPHAFOLD_PATH environment variable
        run: echo "ALPHAFOLD_PATH=${{ github.workspace }}/alphafold" >> $GITHUB_ENV

      # Run tests with pytest
      - name: Run tests
        run: |
          pytest tests/ --disable-warnings
        env:
          NEUROFLEX_DATA_DIR: ${{ github.workspace }}/data
          NEUROFLEX_SAVE_DIR: ${{ github.workspace }}/path/to/save
          ALPHAFOLD_PATH: ${{ env.ALPHAFOLD_PATH }}

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python 3.8
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Cache pip dependencies
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Build the Python package
      - name: Build package
        run: |
          pip install build
          python -m build

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python 3.8
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install build and twine
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # Publish to PyPI
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/* --skip-existing
